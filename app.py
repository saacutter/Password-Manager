from flask import Flask, render_template, request, session, redirect
from flask_session import Session
import sqlite3
from passlib.hash import pbkdf2_sha256 as ph

app = Flask(__name__)

app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
app.config["TEMPLATES_AUTO_RELOAD"] = True
Session(app)

@app.after_request
def after_request(response):
    response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    response.headers["Expires"] = "0"
    response.headers["Pragma"] = "no-cache"
    return response

@app.route("/", methods=["GET", "POST"])
def index():
    # Redirect to the sign up page if the user is not signed in
    if "user_id" not in session:
        return redirect("/login")
    
    # Initialise the database
    db = sqlite3.Connection("database/passwords.db")
    cursor = db.cursor()

    # Retrieve the passwords for the signed in user and close the database
    passwords = cursor.execute("SELECT * FROM passwords WHERE user_id = ?", (str(session["user_id"]))).fetchall()
    db.close()

    # Render the homepage
    return render_template("index.html", accounts=passwords)

@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        # Retrieve the username and passwords generated by the user
        username = request.form.get("username")
        password = request.form.get("password")

        # Initialise the database
        db = sqlite3.Connection("database/passwords.db")
        cursor = db.cursor()

        # Verify that the username exists
        usernames = [user[0] for user in cursor.execute("SELECT username FROM users").fetchall()]
        if username not in usernames:
            return render_template("login.html", error=1)

        # Get the password for the specified user
        correct_password = cursor.execute("SELECT password FROM users WHERE username = ?", (username,)).fetchone()[0]

        # Verify the password
        if not ph.verify(password, correct_password):
            return render_template("login.html", error=2)

        # Set the user ID to the associated account and redirect to the homepage
        session["user_id"] = cursor.execute("SELECT id FROM users WHERE username = ?", (username,)).fetchone()[0]
        cursor.execute("UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = ?", (session["user_id"],))
        db.commit()
        db.close()

        return redirect("/")
    return render_template("login.html", error=0)

@app.route("/signup", methods=["POST"])
def signup():
    # Retrieve the username and passwords generated by the user
    username = request.form.get("username")
    password = request.form.get("password")

    # Verify that a username and password have been given
    if not username or not password:
        return render_template("login.html")

    # Hash the generated password
    password = ph.hash(password)

    # Initialise the database connection
    db = sqlite3.Connection("database/passwords.db")
    cursor = db.cursor()

    # Create the user within the database
    cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, password))
    db.commit()

    # Set the user's ID to the newly created ID and close the database
    session["user_id"] = cursor.execute("SELECT id FROM users WHERE username = ? AND password = ?", (username, password)).fetchone()[0]
    db.close()

    # Redirect to the index page
    return redirect("/")

@app.route("/add", methods=["POST"])
def add_password():
    # Retrieve the username and passwords generated by the user
    name = request.form.get("service")
    username = request.form.get("username")
    password = request.form.get("password")
    website = request.form.get("website")
    details = request.form.get("details")

    # Ensure that each value has a value
    if not name:
        return redirect("/")
    
    # Initialise the database connection
    db = sqlite3.Connection("database/passwords.db")
    cursor = db.cursor()

    # Add the account details into the database
    cursor.execute("INSERT INTO passwords (user_id, name, username, password, website, details) VALUES (?, ?, ?, ?, ?, ?)", (session["user_id"], name, username, password, website, details))
    db.commit()
    db.close()

    # Redirect to the index page
    return redirect("/")

@app.route("/signout")
def sign_out():
    # Clear the current session
    session.clear()

    # Return to the log in page
    return redirect("/")