from app import application, forms, db, models, controllers
from flask import Flask, render_template, request, session, redirect, url_for, flash, send_from_directory, current_app
from flask_session import Session
from flask_login import current_user, login_user, logout_user, login_required
import sqlalchemy as sa
from werkzeug.security import generate_password_hash, check_password_hash
from cryptography.fernet import Fernet
import base64
from hashlib import md5
import os

@application.route("/", methods=["GET", "POST"])
def index():
    if current_user.is_anonymous:
        return render_template("home.html")

    return render_template("index.html", form=forms.AddPasswordForm())

@application.route("/login", methods=["GET", "POST"])
def login():
    # Ensure that the user cannot access this route if they are already signed in
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    
    form = forms.LoginForm()
    if request.method == "POST" and form.validate_on_submit():
        # Retrieve the user from the database based on the provided username/email address
        email = form.email.data.lower().strip()
        user = db.session.scalar(sa.select(models.Users).where((sa.func.lower(models.Users.email) == email)))

        # Ensure that the user exists and that the password hash matches
        if user is None or not user.check_password(form.password.data):
            flash("The username and password do not match")
            return redirect(url_for('login'))
        
        login_user(user, remember=form.remember_user.data)

        return redirect(url_for('index'))
    return render_template("login.html", form=form)

@application.route("/signup", methods=["GET", "POST"])
def signup():
    # Ensure that the user cannot access this route if they are already signed in
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    
    form = forms.RegistrationForm()
    if request.method == "POST" and form.validate_on_submit():
        # Extract the information from the form
        email = form.email.data.strip()
        password = form.password.data.strip()

        # Create the user entry and add it to the database
        user = models.Users(
            email=email,
            password=generate_password_hash(password),
            profile_picture='https://www.gravatar.com/avatar/' + md5(email.encode()).hexdigest() + '?d=identicon'
        )
        db.session.add(user)
        db.session.commit()

        # Log in the user and redirect them to the homepage
        login_user(user, remember=True)
        return redirect(url_for('index'))
    return render_template("register.html", form=form)

@application.route("/signout")
@login_required
def sign_out():
    logout_user()
    return redirect(url_for('index'))

@application.route("/add", methods=["POST"])
@login_required
def add_password():
    # Retrieve the username and passwords generated by the user
    name = request.form.get("name")
    username = request.form.get("username")
    password = request.form.get("password")
    website = request.form.get("website")
    details = request.form.get("details")

    # Ensure a name was provided
    if not name:
        flash("A name for the password is required.")
        return redirect(url_for('index'))

    # Encrypt the data
    key = Fernet(base64.urlsafe_b64encode(current_user.password.encode('utf-8').ljust(32)[:32]))
    name = key.encrypt(name.encode('utf-8')) if name is not None else ""
    username = key.encrypt(username.encode('utf-8')) if username is not None else ""
    password = key.encrypt(password.encode('utf-8')) if password is not None else ""
    website = key.encrypt(website.encode('utf-8')) if website is not None else ""
    details = key.encrypt(details.encode('utf-8')) if details is not None else ""

    # Add the account details into the database
    password = models.Passwords(
        user_id=current_user.id,
        name=name,
        username=username,
        password=password,
        website=website,
        details=details
    )
    db.session.add(password)
    db.session.commit()

    # Redirect to the index page
    return redirect(url_for('index'))

@application.route('/remove/<id>', methods=["POST"])
@login_required
def remove_password(id):
    # Retrieve the password with the given ID
    password = db.session.scalar(sa.select(models.Passwords).where(models.Passwords.id == id))

    # Return an error message if the password is not associated with the current user
    if password.user_id != current_user.id:
        return '', 400

    # Remove the relationship from the database
    db.session.delete(password)
    db.session.commit()

    return '', 200

@application.route('/user/<user_id>', methods=["GET", "POST"])
@login_required
def profile(user_id):
    form = forms.EditProfileForm()

    # Get the user with the specified ID
    user = db.first_or_404(sa.select(models.Users).where(models.Users.id == user_id))

    if request.method == "POST" and form.validate_on_submit():
        # Extract the information from the form
        email = form.email.data.strip().lower()
        password = form.password.data.strip()
        image = request.files['profile_picture'] # Adapted from https://blog.miguelgrinberg.com/post/handling-file-uploads-with-flask
        
        # Save the image to a known location on the server if one was uploaded
        img_filename = image.filename
        if img_filename != "":
            image.save(os.path.join(current_app.config['UPLOAD_PATH'], str(current_user.id) + md5(email.encode()).hexdigest()))
        
        # Update the user information based on the provided information
        current_user.email = email
        if password: current_user.password = generate_password_hash(password)
        if image: current_user.profile_picture = str(current_user.id) + md5(email.encode()).hexdigest()
        
        # Save the new information to the database
        db.session.commit()
        logout_user()
    return render_template("user.html", user=user, form=form)

@application.route('/get_passwords', methods=["POST"])
@login_required
def getPasswords():
    # Retrieve the passwords for the signed in user
    passwords = current_user.passwords

    # Decrypt the passwords
    key = Fernet(base64.urlsafe_b64encode(current_user.password.encode('utf-8').ljust(32)[:32]))
    accounts = controllers.decrypt_passwords(key, passwords)

    return accounts, 200

@application.route('/uploads/<filename>')
@login_required
def upload(filename):
    if os.path.exists(os.path.join(current_app.config['UPLOAD_PATH'], filename)): # Check for profile images
        return send_from_directory(current_app.config['UPLOAD_PATH'], filename)
    else:
        return send_from_directory(os.path.join(os.path.abspath(os.path.dirname(__file__)), 'static/img/'), 'default.png') # Send a file not found image if nothing is found
        # Retrieved from https://en.m.wikipedia.org/wiki/File:No_photo_available.svg
